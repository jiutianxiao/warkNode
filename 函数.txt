	

	函数的三种角色：
		1、普通函数：当方法运行的时候，形成一个私有作用域，1>形参赋值	2>预解释		3>代码从上往下执行
		
		2、构造函数（类）：new+函数名执行，通过这种方式运行的函数就称为是构造函数，构造函数有自己原型对象（prototype），构造函数里通过this.xx=xx设置的属性都是实例的私有属性，this表示某一个实例，hasOwnPrototyperty可以判断是私有的属性还是公有的属性	构造函数中的属性和方法都是私有的，原型prototype都是公有的属性和方法，_ _proto_ _原型链查找机制
		
		3、函数也是对象，只是函数比较特殊，因此单独独立成function类型，fn instanceof Object  ->true 	可以像对象一样设置子自己属性和值	对象就跟普通的对象obj={}一样，都有自己私有的属性和方法：公有的属性和方法

	以上三种角色之间相互独立，没有关系
	所有的函数都是Function类的实例
	所有的对象都是Object类的实例

	原型图上的各种关系；
		任何对象（new出来的任何实例对象）最终都能通过_ _proto_ _找到object；
		所有类都是构造函数function（）的实例
		function是object的爹
			object.prototype是function.prototype的爹



	call/apply方法运行时：1、改变方法（fn）的this关键字，把this关键字变成第一个实参，让方法（fn）运行

	1、让“.”前面的方法的this关键字变成第一个实参
	2、让“.”前面的方法运行

	
	call和apply的区别：传参的方式不一样；call是散列式的传参方式，apply是打包式的传参方式


	call可以有很多参数，apply只能有两个参数，第一个都是this，第二个apply可以传一个数组，里面放很多的值，其他的依次都是形参，就是把call第一个参数后面的参数放到一个数组里了

	this中的








	预处理机制，提前把this指向改了，参数也传好了，bind会返回一个函数，啥时候需要啥时候调用即可


	


	

	