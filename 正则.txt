


	u4e00-u9fa5


正则表达式的定义：定义一个模型/模式->1.用这个模型区检测字符串是否匹配2.吧匹配的内容提取出来

正则表达式组成部分：元字符（特殊含义的元字符和普通的元字符）和修饰符


正则特性：
	1）懒惰性：解决措施：全局修饰符g
		g可以改变reg.lastIndex的查找位置
		不添加全局g，lastindex永远从0开始查找；
		添加全局g以后，就会从上次查找的位置开始查找这次的
	2）贪婪性：？在量词后面表示取消贪婪匹配



符号：
	符号	含义		符号	含义
	\	转义符
	|	或
	()	分组 
	.	除n以外的其它字符
	\n	控制台换行
	\b	单词边界
	^	开头
	$	结尾
	\d	0-9的数字		\D	和\d相反
	\w	字母数字下划线	\W	相反
	\s	空格包括制表


符等	\S	相反
	[abc]	a或者b或者c中的一个		
	[a-z]	a-z中的任意一个
	[^abc]	除了a或者b或者c三个中的任意一个
	[^a-z]	除了a-z开头的任意一个

	中括号中出现的字符没有特殊的含义
	[ ]中不支持两位数
	[\w+ ]在中括号中出现的任何字符都是代表本身意思的元字符：数字、字母、下划线或者+加号中的一个
	在中括号中出现的多位数字是每一个数字中的一个

	（）小括号：分组
		分组作用：提升优先级
		分组引用：规定和某一个分组出现的内容一模一样，分组是从左往右查找的，是看左括号的开始顺序
		分组捕获：在在捕获大正则匹配内容的时候，还可以顺便把每一个小分组匹配的内容单独的捕获到

	代表次数的量词元字符
	符号	含义
	*	0到多次
	+	1到多次
	?	0或者1次
	{n}	n次
	{n,}	至少n次
	{n,m}	n到m次	

	特殊意义的元字符
	符号	含义
	g	全局查找
	i	不区分大小写
	m	换行


	修饰符
	符号	含义
	g	global		全局
	i	ignoreCase	忽略大小写
	m	multiline		可以匹配多行
	


	符号	含义
	?:	只匹配不捕获
	?=	正向预查
	？！	负向预查



	？在量词后面表示取消贪婪匹配
	()	1、分组 改变优先级	2分组反向引用
	[ ]	1、[]里的字符表示元字符本身	2、[]里面没法子识别两位数


	通过查看RegExp.prototype，学习正则上的方法和属性
	test()	字符串相匹配
	exec()	把内容捕获粗来修饰符



	exec()和match	加g之后：exec是能吧大正则小正则匹配的内容都捕获到，但是match只能捕获到大正则的内容，不加g时，exec和match是一样的



	创建方式：
	1）实例创建 ：	var   a=new RegExp（\\d）
	2）自变量创建：	var   a=/\d/2
	实例创建需要转义，自变量不用
	实例的可以用字符串拼接，自变量不行


	验证有效数
	1、+-可有可无
	2、可以是一位数，如果是多位数，第一位必须是1-9的数
	3、小数可有可无

	
	3、问号的作用：
		如果问号的左边是一个非量词元字符，例如var=reg/\d?/，代表的意思是：当前的问号本身是一个量词元字符，出现0-1次
		如果问号的左边是一个量词元字符，例如：varreg=/\d+?/，代表的意思是：在正则捕获的时候取消它的贪婪捕获
		?:  ：例如：var reg=/?:\d+/，只出现在分组中，代表值匹配不捕获
		?=正向预查（不管是正向还是福相其实都是在设定一些条件）
		?! 负向预查




	正则捕获：
		RegExp.$n：不管是使用test/exec匹配捕获一次后，RegExp.$n记录了第n个分组中所匹配的内容-->n的最大值到9    在匿名函数中使用RegExp.$n存在兼容性问题，但是不在匿名函数中就不会有兼容性问题
		exec捕获到的是一个数组，索引0是大正则捕获的内容，索引1是第一个分组捕获的内容。。。依次往后，index：大正则本次捕获的起始位置索引位置 input是原始字符串


	正则捕获的懒惰性和贪婪性
		懒惰性：多次执行exec也只能把正则第一个匹配的内容捕获到，后面匹配的内容无法获取；出现懒惰性的原因取决于正则的lastIndex这个属性的值->lastindexof正则的下一次捕获的开始查找的索引的位置
		当有一次查找不到的时候，浏览器会自己把lastIndex=0,所以下一次又会从头开始

		贪婪性：在每一次捕获的时候，总是按照匹配规则最长的字符串进行捕获



		字符串match：在加g的情况下执行一次可以吧所有需要捕获的内容都捕获到；但是只能捕获到大正则所匹配的内容，无法获取小分组捕获的内容；如果只需要捕获一次既可捕获全，那么match和exec获取的结果是一样的，也可以捕获到小分组匹配的内容
		replace传递进入的这个匿名函数执行几次？取决于正则与字符串匹配的次数，匹配一次执行一次。每执行一次匿名函数都会把当前匹配/捕获的内容当做参数传递给这个匿名函数（argument中存储的值和我们每一次执行exec获取的数组是非常相似的）每一次执行匿名函数，在方法中return后面返回啥，都相当于把当前这一次大正则所匹配的内容替换成啥


















